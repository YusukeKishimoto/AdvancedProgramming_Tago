package newlang4;

public class AssignNode extends Node{
	
	Node expr;
	Node var;
	
	private AssignNode(Environment env){
		super.env = env;
		super.type = NodeType.ASSIGN_STMT;
	}
	
	public static Node isMatch(Environment env, LexicalUnit first){
		try{
			//LexicalUnit first が NAME であるはずがない
			//if(first.getType() != LexicalType.NAME) return null;
			
			//firstを取得
			LexicalUnit lu = env.getInput().get();;

			//System.out.println(first);
			//firstの次を取得
			lu = env.getInput().get();
			//System.out.println(lu);
			
			env.getInput().unget(lu);
			env.getInput().unget(first);
			
			if(lu.getType() != LexicalType.EQ) return null;
			
			System.out.print(first.value.getSValue()+"[ ");
			return new AssignNode(env);
			
		}catch (Exception e){
			e.printStackTrace();
			return null;
		}
		
	}
	@Override
	public boolean Parse() throws Exception{
		LexicalUnit name = env.getInput().get();
		//lu = <EQ>
		LexicalUnit lu = env.getInput().get();
		//lu = <EQ>の次
		lu = env.getInput().get();
		env.getInput().unget(lu);
		
		var = VariableNode.isMatch(env, name);
		expr = ExprNode.isMatch(env, lu);
		if(expr != null){
			return expr.Parse();
		}
		return false;
	}
	
	@Override
	public Value getValue() {
		VariableNode v = (VariableNode)var;
		v.setValue(expr.getValue());
		System.out.println(env.var_table.get("a").val.getType());
		//System.out.println(v.val);
		return v.getValue();
	}

}
