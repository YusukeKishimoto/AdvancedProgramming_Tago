package newlang4;

import java.util.HashSet;
import java.util.Set;

public class CondNode extends Node{
	Node leftexpr;
	LexicalUnit cond_operator;
	Node rightexpr;

	private CondNode(Node left, Node right, LexicalUnit op, Environment env){		
		super.env = env;
		super.type = NodeType.COND;
		this.leftexpr = left;
		this.rightexpr = right;
		this.cond_operator = op;
	}
	private static Set<LexicalType> CondOperatorSet = new HashSet<LexicalType>();
	static{
		CondOperatorSet.add(LexicalType.EQ);
		CondOperatorSet.add(LexicalType.GT);
		CondOperatorSet.add(LexicalType.LT);
		CondOperatorSet.add(LexicalType.GE);
		CondOperatorSet.add(LexicalType.LE);
		CondOperatorSet.add(LexicalType.NE);
	}
	
	private static boolean isCondOperator(LexicalUnit operator){
		if (CondOperatorSet.contains(operator.type)) {
			return true;
		}
		return false;
	}
	
	public static Node getCondition(Environment env, LexicalUnit first) throws Exception{
		Node left = ExprNode.isMatch(env, first);
		if(left!=null){
			if(left.Parse()==false){
				return null;
			}
		}
		LexicalUnit cond = env.getInput().get();
		if(isCondOperator(cond)!=true) return null;
		System.out.print(" "+cond.type+" ");
		
		LexicalUnit lu = env.getInput().get();
		env.getInput().unget(lu);
		
		Node right = ExprNode.isMatch(env,lu);
		if(right!=null){
			if(right.Parse()==false){
				return null;
			}
		}
		return new CondNode(left,right,cond,env);
	}
	
	@Override
	public Value getValue(){
		
		//System.out.println(leftexpr.getValue().getDValue());
		//System.out.println(rightexpr.getValue().getDValue());		
		switch(cond_operator.type){
		case EQ:
			if(leftexpr.getValue().getType() == ValueType.STRING && rightexpr.getValue().getType() == ValueType.STRING){
				if(leftexpr.getValue().getSValue().equals(rightexpr.getValue().getSValue())){
					return val;
				}
				return null;
			}
			if(leftexpr.getValue().getDValue() == rightexpr.getValue().getDValue()) return val;
			return null;
		case GT:
			if(leftexpr.getValue().getDValue() < rightexpr.getValue().getDValue()) return val;
			return null;
		case LT:
			if(leftexpr.getValue().getDValue() > rightexpr.getValue().getDValue()) return val;
			return null;
		case GE:
			if(leftexpr.getValue().getDValue() <= rightexpr.getValue().getDValue()) return val;
			return null;
		case LE:
			if(leftexpr.getValue().getDValue() >= rightexpr.getValue().getDValue()) return val;
			return null;
		case NE:
			if(leftexpr.getValue().getType() == ValueType.STRING && rightexpr.getValue().getType() == ValueType.STRING){
				if(!leftexpr.getValue().getSValue().equals(rightexpr.getValue().getSValue())){
					return val;
				}
				return null;
			}
			if(leftexpr.getValue().getDValue() != rightexpr.getValue().getDValue()) return val;
			return null;
		default:
			return null;
		}
	}
}
