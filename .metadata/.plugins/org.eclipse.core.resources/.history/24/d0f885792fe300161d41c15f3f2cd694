package newlang4;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class ExprListNode extends Node {

	Node body;
	List<Node> exprNodeArray = new ArrayList<Node>();
	
	private ExprListNode(Environment env) {
		super.env = env;
		super.type = NodeType.EXPR_LIST;
	}
	
	private static Set<LexicalType> firstSet = new HashSet<LexicalType>();
	static {
		firstSet.add(LexicalType.NAME);
		firstSet.add(LexicalType.INTVAL);
		firstSet.add(LexicalType.DOUBLEVAL);
		firstSet.add(LexicalType.LITERAL);
		firstSet.add(LexicalType.LP);
	}
	
	public static Node isMatch(Environment env, LexicalUnit first) {
		if (!firstSet.contains(first.type)) {
			return null;
		}
		return new ExprListNode(env);
	}
	
	@Override
	public boolean Parse() throws Exception {
		while(true) {
			LexicalAnalyzer la = env.getInput();
			LexicalUnit lu = la.get(); // 先読み
			System.out.print("[ExprList]\t");
			System.out.println(lu);

			if (lu.getType() == LexicalType.NL) return false;
			
			if (lu.getType() == LexicalType.COMMA) continue;
				
			body = ExprNode.isMatch(env, lu);
			if (body != null) { // stmtならnullは帰ってこない
				if (body.Parse() == false) return false; // parseが失敗したら終わり
				exprNodeArray.add(body); //list -> 前から入れて後ろから出せる。長さが変えられる配列。配列の要素はnode
				continue;
			}
			return true;
		}
	}
	
	@Override
	public Value getValue() {
		System.out.println(body);

		return body.getValue();
	}
}